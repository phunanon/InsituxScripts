
;TODO: lower-case commands, check if player exists

;Poly-fill until higher Insitux version
(function rand to (/ (rand-num (* to 1000)) 1000))
(function rand-ab a b (/ (rand-num (* a 1000) (* b 1000)) 1000))
(function ran to
  (let arr [])
  (while (< (len arr) to)
    (let arr (into arr [(len arr)])))
  arr)
(function numbered items
  (let l (len items))
  (let n 0)
  (let list [])
  (while (< n l)
    (let list (into list [(str (inc n) ". " (n items))]))
    (let n (inc n)))
  (join list "\n"))

(function pos-fmt pos
  (str (round (0 pos)) ", " (round (2 pos))))

(function rand-near pos dist
  ;Needs higher Insitux version:
  ;(let angle (rand (* 2 (pi))))
  (let angle (/ 50 (rand 314)))
  (let xz [(cos angle) (sin angle)])
  ;(let point [(cos angle) 0 (sin angle)])
  ;Broken in Deadline:
  ;(let point (for * [dist] point))
  (let point [(* (0 xz) dist) 0 (* (1 xz) dist)])
  (map + point pos))

;(function frac->coords map-name xyz
;  (let dimensions {
;    "dl_shipment" [[639 424 -134] [-494 414 -551]]})
;  (let dimensions (dimensions map-name))
;  (let diffs (.. map - dimensions))
;  (map + (map * xyz diffs) (1 dimensions)))

;Replace ' with " upon Insitux version 0914
(var cmds "Note: replace [player] with player name or number via 'players'
  examples: 'heal XxPlayerxX' or 'heal 3'
Commands:
  'players' - list players each with a number
  'team security' or 'team insurgent' - switch to either team
  'heal' or 'heal [player]' - heal yourself or a player fully
  'drone' or 'drone [player]' - order drone strike on your or player's position
  'brrr [player]' - order airstrike on player
  'flare' or 'flare [player]' - fire a flare above yourself or another player
  'explode [player]' - kill player with an explosion
  'explode near [player]' - cause an explosion near the player (non-lethal)
  'teleport [player]' or 'teleport to [player]' - teleport player to you or vice versa")

(var players [])
;Try rewriting in the future, so much broken atm
(function ->name text
  (let nums (ran (len players)))
  (let nums (map inc nums))
  (let i (idx (map str nums) text))
  (if i (i players) text))

(function sent sender channel msg
;Upon higher Insitux version
; (when (starts-with? msg "(")
;   (dl.util.fmessage (eval msg)))

  (let parts (split msg))
  (let cmd (0 parts))
  (let body (join (sect parts)))
  (let body (if (!= body "") body))

  (when (= cmd "cmds")
    (dl.util.fmessage cmds))

  (when (= cmd "players")
    (var players (dl.list_players))
    (dl.util.fmessage (numbered players)))

  (when (and (= cmd "team") (["security" "insurgent"] body))
    ((str "$dl.players." sender ".team")
     body)
    (dl.util.fmessage (str sender " team changed to " body)))

  (when (= cmd "teleport")
    (let is-to (= (1 parts) "to"))
    (let a (if is-to sender (2 parts)))
    (let b (if is-to (1 parts) sender))
    (let a (->name a))
    (let b (->name b))
(print a " " b)
    ((str "$dl.players." a ".position")
     (position (str "dl.players." b)))
    (dl.util.fmessage (str "Teleported " a " to " b)))

  (when (and (= cmd "brrr") body)
    (let player (->name body))
    (dl.util.fmessage (str "Airstrike target locked: " player))
    (wait 1)
    (dl.util.fmessage "Coming in hot in 5")
    (wait 1)
    (dl.util.fmessage "4")
    (wait 1)
    (dl.util.fmessage "3")
    (wait 1)
    (dl.util.fmessage "2...")
    (wait 2)
    (let pos (position (str "dl.players." player)))
    (let i 0)
    (while (< i 100)
      (let i (inc i))
      (wait .01)
      (let rands [(rand 10) 0 (rand 10)])
      (dl.util.explosion (map + [(- (* i 2) 100) 0 0] rands pos)))
    (dl.util.fmessage (str player " has been brrr'd.")))

  (when (= cmd "drone")
    (let player (if body (->name body) sender))
    (let pos (position (str "dl.players." player)))
    (dl.util.fmessage "Position locked!")
    (dl.util.fmessage "Drone strike in 4")
    (wait 1)
    (dl.util.fmessage "3")
    (wait 1)
    (dl.util.fmessage "2...")
    (wait 2)
    ;Replace with `range` once fixed in Deadline
    (let i 0)
    (let lim (+ 5 (rand 5)))
    (while (< i lim)
      (let i (inc i))
      (wait .25)
      (let rands [(rand-ab -50 50) 30 (rand-ab -50 50)])
      (dl.util.explosion (map + rands pos)))
    (dl.util.fmessage "Drone strike complete."))

  (when (= cmd "flare")
    (let who (if body (->name body) sender))
    (let pos (position (str "dl.players." who)))
    (dl.util.explosion (map + [0 100 0] pos) "TestGrenade")
    (dl.util.fmessage (str "Fired flare above " who)))

  (when (= cmd "position")
    (let player (if body (->name body) sender))
    (let pos (position (str "dl.players." player)))
    (dl.util.fmessage (pos-fmt pos)))

  (when (= cmd "heal")
    (let player (if body (->name body) sender))
    ((str "$dl.players." player ".health") 100)
    (dl.util.fmessage (str "Healed " player)))

  (when (and (= cmd "explode") body)
    (let is-near (= (1 parts) "near"))
    (let player ((if is-near 2 1) parts))
    (let player (->name player))
    (let pos (position (str "dl.players." player)))
    (let pos (if is-near (rand-near pos 48) pos))
    (dl.util.explosion pos "TestGrenade")
    (dl.util.fmessage (str sender " exploded " body)))

  (chatbot-extra sender channel msg))

(function chatbot-extra sender channel msg null)
(dl.events.on_chat_message.kill)
(dl.events.on_chat_message.connect sent)
;Replace ' with " upon Insitux version 0914
(dl.util.fmessage "Loaded Insitux chatbot! Chat 'cmds' to see list of available commands.
Note: this is a CHAT bot, you send the commands in the chat.")
